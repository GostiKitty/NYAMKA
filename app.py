import os
import sys
import asyncio
import contextlib
import requests
from aiohttp import web
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from loguru import logger

# ‚îÄ‚îÄ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is required")
PORT = int(os.environ.get("PORT", "8080"))
HOST = os.environ.get("HOST", "0.0.0.0")

# ‚îÄ‚îÄ Logging: minimal buffers, console only ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logger.remove()  # remove default handler
logger.add(sys.stdout, level=os.getenv("LOG_LEVEL", "WARNING"))

# ‚îÄ‚îÄ AIROGRAM BOOTSTRAP (v3.11) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# ‚îÄ‚îÄ OPTIONAL UI: currency rates button ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
main_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìà –ö—É—Ä—Å –≤–∞–ª—é—Ç")]],
    resize_keyboard=True
)

@router.message(F.text == "/start")
async def cmd_start__nyamka(m: Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç NYAMKA üêæ", reply_markup=main_kb)

@router.message(F.text == "üìà –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def currency_rates__nyamka(m: Message):
    try:
        r = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
        data = r.json()
        usd = float(data["Valute"]["USD"]["Value"])
        cny = float(data["Valute"]["CNY"]["Value"])
        text = f"üíµ 1 USD = {usd:.2f} ‚ÇΩ\\nüá®üá≥ 1 CNY = {cny:.2f} ‚ÇΩ"
    except Exception as e:
        logger.error(f"Currency fetch error: {e}")
        text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç üòî"
    await m.answer(text)

# ‚îÄ‚îÄ BEGIN: imported handlers from notebook ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# # 1) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# !pip install -q --upgrade aiogram==3.4.1 openai>=1.40.0 python-dotenv>=1.0.1 requests>=2.31.0 PyYAML>=6.0.1 nest_asyncio>=1.6.0 tzdata>=2024.1
# print("‚úÖ –ì–æ—Ç–æ–≤–æ")

# –Ø—á–µ–π–∫–∞ 1 ‚Äî —Å—Ç–∞–≤–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
#               openai==1.46.0 deta==1.2.0


import os
from aiohttp import web


# –Ø—á–µ–π–∫–∞ 2 ‚Äî –≤–≤–æ–¥ —Å–µ–∫—Ä–µ—Ç–æ–≤ —Å–∫—Ä—ã—Ç–æ (—Ç–æ—á–∫–∞–º–∏) –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
import os


# –í Deta Space –∫–ª—é—á –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:
# DETA_PROJECT_KEY from env

BOT_TOKEN = os.getenv("BOT_TOKEN", "")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

OWM_API_KEY = os.getenv("OWM_API_KEY", "")

# –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ë–î –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω (Deta Base), –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:
os.environ["DB_PATH"] = "db.sqlite3"

print("‚úÖ –°–µ–∫—Ä–µ—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –Ω–∞ –¥–∏—Å–∫).")


# –Ø—á–µ–π–∫–∞ 3 ‚Äî —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∞–¥–∞–ø—Ç–µ—Ä –ë–î –Ω–∞ Deta Base
from pathlib import Path

Path("lovebot").mkdir(exist_ok=True)

db_code = r'''
# lovebot/db_deta.py ‚Äî –ø—Ä–æ—Å—Ç–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ Deta Base
import os, time
from deta import Deta

def _deta():
    key = os.getenv("DETA_PROJECT_KEY")  # –≤ Deta Space –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
    return Deta(key) if key else Deta()

deta = _deta()
prefs  = deta.Base("prefs")
moods  = deta.Base("moods")
chat   = deta.Base("chatlog")
qans   = deta.Base("qanswers")

def _fetch_all(base, query=None, limit=1000):
    query = query or {}
    res = base.fetch(query, limit=limit)
    items = list(res.items)
    while res.last:
        res = base.fetch(query, last=res.last, limit=limit)
        items.extend(res.items)
    return items

# ---------- PREFERENCES ----------
def get_prefs(uid: int):
    key = str(uid)
    it = prefs.get(key)
    if not it:
        it = {"key": key, "user_id": uid, "city": "Moscow", "partner_city": "Zibo", "units": "metric", "petname": "–∑–∞–π—á–∏–∫"}
        prefs.put(it)
    return it

def set_prefs(uid: int, **kwargs):
    it = get_prefs(uid)
    for k, v in kwargs.items():
        if v is not None:
            it[k] = v
    prefs.put(it)
    return it

def list_user_ids():
    items = _fetch_all(prefs, {})
    out = []
    for it in items:
        try:
            out.append(int(it.get("key") or it.get("user_id")))
        except Exception:
            pass
    return list(sorted(set(out)))

# ---------- MOODS ----------
def set_mood(uid: int, day: str, rating: int, note: str = ""):
    key = f"{uid}:{day}"
    item = {"key": key, "user_id": uid, "day": day, "rating": int(rating), "note": note or "", "ts": int(time.time())}
    moods.put(item)
    return item

def get_mood(uid: int, day: str):
    return moods.get(f"{uid}:{day}")

def week_moods(uid: int, days: list[str]):
    out = []
    for d in days:
        it = moods.get(f"{uid}:{d}")
        if it:
            out.append(it)
    return out

# ---------- CHAT LOG ----------
def log_chat(uid: int, role: str, content: str):
    chat.put({"user_id": uid, "role": role, "content": content, "ts": int(time.time())})

def fetch_chat(uid: int, limit: int = 100):
    items = _fetch_all(chat, {"user_id": uid}, limit=limit)
    items.sort(key=lambda x: x.get("ts", 0))
    return items[-limit:]

# ---------- Q&A ----------
def save_answer(uid: int, category: str, question: str, answer: str):
    qans.put({"user_id": uid, "category": category, "question": question, "answer": answer, "ts": int(time.time())})

def fetch_answers(uid: int, since_ts: int | None = None, limit: int = 100):
    items = _fetch_all(qans, {"user_id": uid}, limit=limit)
    if since_ts:
        items = [i for i in items if i.get("ts", 0) >= since_ts]
    items.sort(key=lambda x: x.get("ts", 0))
    return items[-limit:]
'''

(Path("lovebot/db_deta.py")).write_text(db_code, encoding="utf-8")
print("‚úÖ db_deta.py —Å–æ–∑–¥–∞–Ω")


# 3) –°–∞–Ω–∏—Ç–∏-—á–µ–∫: –±–æ—Ç, OpenAI, OpenWeather
# removed nest_asyncio for server env
from dotenv import load_dotenv
# removed nest_asyncio.apply()
load_dotenv("lovebot/.env")

from aiogram import Bot
import asyncio

# BOT_TOKEN from env
# OPENAI_API_KEY from env
# OWM_API_KEY from env

print("üîπ BOT_TOKEN:", bool(BOT_TOKEN))
print("üîπ OPENAI_API_KEY:", bool(OPENAI_API_KEY))
print("üîπ OWM_API_KEY:", bool(OWM_API_KEY))

async def tg_check():
    if not BOT_TOKEN: 
        print("‚õî –ù–µ—Ç BOT_TOKEN"); 
        return
    b = Bot(BOT_TOKEN)
    me = await b.get_me()
    print("‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω:", me.username)
    await b.session.close()


# OpenAI ‚Äî –º–∏–Ω–∏-–ø–∏–Ω–≥
if OPENAI_API_KEY:
    try:
        from openai import OpenAI
        cli = OpenAI(api_key=OPENAI_API_KEY)
        r = cli.chat.completions.create(
            model=os.getenv("OPENAI_MODEL","gpt-4o-mini"),
            messages=[{"role":"user","content":"–°–∫–∞–∂–∏ ¬´–æ–∫¬ª"}],
            max_tokens=5,
        )
        print("‚úÖ OpenAI –æ—Ç–≤–µ—Ç:", r.choices[0].message.content)
    except Exception as e:
        print("‚õî OpenAI –æ—à–∏–±–∫–∞:", e)

# –ü–æ–≥–æ–¥–∞
if OWM_API_KEY:
    try:
        r = requests.get("https://api.openweathermap.org/data/2.5/weather",
                         params={"q":"Moscow,RU","appid":OWM_API_KEY,"units":"metric","lang":"ru"},
                         timeout=6)
        print("üå¶ OpenWeather —Å—Ç–∞—Ç—É—Å:", r.status_code, r.json().get("weather",[{}])[0].get("description"))
    except Exception as e:
        print("‚õî OpenWeather –æ—à–∏–±–∫–∞:", e)


# –Ø—á–µ–π–∫–∞ 3 ‚Äî –ø–∞—Ç—á main.py –ø–æ–¥ DB_PATH + –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏)
from pathlib import Path
import re

p = Path("lovebot/main.py")
assert p.exists(), "–ù–µ –Ω–∞—à–ª–∞ lovebot/main.py ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π/–≤—Å—Ç–∞–≤—å —Å–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞."

s = p.read_text(encoding="utf-8")



# –Ø—á–µ–π–∫–∞ 4 ‚Äî lovebot/llm.py
llm_code = r'''
import os
from openai import OpenAI

MODEL = os.getenv("LLM_MODEL", "gpt-4o-mini")
_temp  = float(os.getenv("LLM_TEMP", "0.8"))

_client = None
def _client_ok():
    global _client
    if _client is None:
        _client = OpenAI()
    return _client

def reply(hist: list[dict], system: str | None = None) -> str:
    """hist = [{"role":"user"/"assistant","content":"..."}, ...]"""
    msgs = []
    if system:
        msgs.append({"role": "system", "content": system})
    msgs.extend(hist)
    r = _client_ok().chat.completions.create(model=MODEL, messages=msgs, temperature=_temp)
    return (r.choices[0].message.content or "").strip()
'''
from pathlib import Path
Path("lovebot/llm.py").write_text(llm_code, encoding="utf-8")
print("‚úÖ llm.py —Å–æ–∑–¥–∞–Ω")


# –Ø—á–µ–π–∫–∞ 4 ‚Äî —Å–æ–∑–¥–∞—ë–º webhook.py
from pathlib import Path

WEBHOOK = r'''# webhook.py ‚Äî –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è aiogram v3 (Replit)
import os
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from lovebot import main as lm

bot = lm.bot
dp = lm.dp

WEBHOOK_PATH = "/tg"
PUBLIC_URL = os.getenv("PUBLIC_URL")  # https://<project>.<user>.repl.co
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "dev-secret")
PORT = int(os.getenv("PORT", "8080"))

async def on_startup(app: web.Application):
    try:
        await lm._set_commands()
    except Exception:
        pass
    try:
        lm.SCHED = AsyncIOScheduler()
        lm.SCHED.start()
        lm._schedule_all_users()
    except Exception:
        pass
    await bot.delete_webhook(drop_pending_updates=True)
    if PUBLIC_URL:
        await bot.set_webhook(url=PUBLIC_URL + WEBHOOK_PATH, secret_token=WEBHOOK_SECRET)
    else:
        print("‚ö†Ô∏è PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ Secrets –Ω–∞ Replit.")

async def on_shutdown(app: web.Application):
    try:
        await bot.delete_webhook()
    except Exception:
        pass

async def health(_):
    return web.Response(text="ok")

app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

SimpleRequestHandler(dp, bot, secret_token=WEBHOOK_SECRET).register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

app.router.add_get("/", health)

    # removed run_app
'''
Path("webhook.py").write_text(WEBHOOK, encoding="utf-8")
print("‚úÖ webhook.py —Å–æ–∑–¥–∞–Ω")


# 4) –ü–∏—à–µ–º lovebot/llm.py
from pathlib import Path
Path("lovebot").mkdir(exist_ok=True)

LLM_CODE = r'''
import os
from openai import OpenAI

MODEL   = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
API_KEY = os.getenv("OPENAI_API_KEY")
BASE    = os.getenv("OPENAI_BASE_URL")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
TIMEOUT = float(os.getenv("LLM_TIMEOUT", "30"))
RETRIES = int(os.getenv("LLM_RETRIES", "1"))

_client = None
def _client_ok():
    global _client
    if _client is None:
        if not API_KEY:
            raise RuntimeError("OPENAI_API_KEY is empty")
        _client = OpenAI(api_key=API_KEY, base_url=BASE) if BASE else OpenAI(api_key=API_KEY)
        # client-level timeout/retries
        _client._settings["timeout"] = TIMEOUT
        _client._settings["max_retries"] = RETRIES
    return _client

SYSTEM = (
    "–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è, —Ç—ë–ø–ª–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—à–∞. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É. "
    "–í—Å–µ–≥–¥–∞ PG-21 (—Å —è–≤–Ω–æ–π —ç—Ä–æ—Ç–∏–∫–∏ –∏ –ø–æ—Ä–Ω–æ). "
    "–ú–∞—Ç –≤—Å–µ–≥–¥–∞ "
    "–≠–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π; —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—á–µ–Ω—å —É–º–µ—Å—Ç–Ω–æ ‚Äî –º–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω. "
)

def _context(ctx: dict) -> str:
    pet = ctx.get("petname", "–∑–∞–π—á–∏–∫")
    msk = ctx.get("msk", "")
    sha = ctx.get("sha", "")
    left = ctx.get("days_left", "")
    tgt = ctx.get("target", "")
    return (
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ú–æ—Å–∫–≤–∞ {msk}, Zibo {sha}. –î–æ –∏—é–ª—è 2026: {left} –¥–Ω–µ–π (—Ü–µ–ª—å: {tgt}). "
        f"–û–±—Ä–∞—â–∞–π—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –∫–∞–∫ ¬´{pet}¬ª. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–ø–æ–ª–Ω—ã–π ‚Äî –∑–∞–¥–∞–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å."
    )

def reply_as_girlfriend(history, ctx):
    client = _client_ok()
    messages = [
        {"role":"system","content":SYSTEM},
        {"role":"system","content":_context(ctx)},
    ]
    for h in history:
        role = h.get("role","user")
        content = (h.get("content") or "").strip()
        if not content: 
            continue
        if role not in ("user","assistant","system"):
            role = "user"
        messages.append({"role":role, "content":content})

    resp = client.chat.completions.create(
        model=MODEL,
        messages=messages,
        temperature=0.7,
        max_tokens=220,
    )
    txt = (resp.choices[0].message.content or "").strip()
    return txt or "..."
'''
Path("lovebot/llm.py").write_text(LLM_CODE, encoding="utf-8")
print("‚úÖ llm.py –∑–∞–ø–∏—Å–∞–Ω")


# –Ø—á–µ–π–∫–∞ 5 ‚Äî lovebot/main.py
from pathlib import Path
main_code = r'''
# -*- coding: utf-8 -*-
import os, asyncio, random, requests
from datetime import date, datetime, timedelta

# aiogram imports adjusted by main app
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .db_deta import (
    get_prefs, set_prefs, list_user_ids,
    set_mood, get_mood, week_moods,
    log_chat, fetch_chat,
    save_answer, fetch_answers,
)
from .llm import reply as llm_reply

# BOT_TOKEN from env
# bot = Bot(...)  # replaced by main app bot
# dp = Dispatcher(...)  # replaced by main app dp
# ---------- –í–û–ü–†–û–°–´ ----------
QUESTIONS = {
    "light": [
        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–µ–ª–∏ —Ç–µ–±–µ –∑–∞–ø–æ–º–Ω–∏–ª—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏ –ø–æ—á–µ–º—É?",
        "–ß—Ç–æ —Ç–µ–±—è –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è?",
        "–ö–∞–∫–∞—è –º–µ–ª–æ—á—å —Å–¥–µ–ª–∞–ª–∞ —Ç–≤–æ–π –¥–µ–Ω—å –ª—É—á—à–µ?",
    ],
    "deep": [
        "–û —á—ë–º —Ç–µ–±–µ —Å–µ–π—á–∞—Å —Ç—Ä—É–¥–Ω–µ–µ –≤—Å–µ–≥–æ –≥–æ–≤–æ—Ä–∏—Ç—å –≤—Å–ª—É—Ö?",
        "–ö–æ–≥–¥–∞ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?",
        "–ß—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —á–∞—â–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –º–µ–Ω—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ?",
    ],
    "flirt": [
        "–ö–∞–∫–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —É –º–µ–Ω—è —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–≤–æ–¥–∏—Ç?",
        "–ì–¥–µ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –º–µ–Ω—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
        "–ß—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ, —Ç–æ–ª—å–∫–æ –≤–¥–≤–æ—ë–º?",
    ],
}

Q_WAIT: dict[int, dict] = {}   # –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è {uid: {"cat":..,"q":..}}

# ---------- –ö–ù–û–ü–ö–ò-–ú–ï–ù–Æ (–¢–û–õ–¨–ö–û –≠–ú–û–î–ó–ò) ----------
def menu_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üíô", callback_data="mood")
    kb.button(text="üíå", callback_data="q")
    kb.button(text="üïí", callback_data="time")
    kb.button(text="üåä", callback_data="weather")
    kb.button(text="üìÖ", callback_data="week")
    kb.adjust(5)
    return kb.as_markup()

def today_panel(uid: int):
    pref = get_prefs(uid)
    msk = datetime.utcnow() + timedelta(hours=3)
    sha = datetime.utcnow() + timedelta(hours=8)   # –®–∞–Ω—Ö–∞–π/–¶–∑—ã–±–æ UTC+8
    return (
        f"‚è± –ú–æ—Å–∫–≤–∞: <b>{msk:%H:%M}</b>  ‚Ä¢  –¶–∑—ã–±–æ/–®–∞–Ω—Ö–∞–π: <b>{sha:%H:%M}</b>\n"
        f"üèô –ú–æ—Å–∫–≤–∞: {pref.get('city','Moscow')}  ‚Ä¢  –ü–∞—Ä—Ç–Ω—ë—Ä: {pref.get('partner_city','Zibo')}"
    )

# ---------- /start /menu ----------
@router.message(Command("start"))
async def start_cmd(m: types.Message):
    uid = m.from_user.id
    get_prefs(uid)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    await m.answer(today_panel(uid), reply_markup=menu_kb())

@router.message(Command("menu"))
async def menu_cmd(m: types.Message):
    await m.answer(today_panel(m.from_user.id), reply_markup=menu_kb())

# ---------- –ù–ê–°–¢–†–û–ï–ù–ò–ï ----------
@router.callback_query(F.data == "mood")
async def cb_mood(c: types.CallbackQuery):
    uid = c.from_user.id
    day = date.today().isoformat()
    old = get_mood(uid, day)
    msg = "–û—Ü–µ–Ω–∏ –¥–µ–Ω—å –æ—Ç 1 –¥–æ 10:"
    if old:
        msg += f" (—Å–µ–π—á–∞—Å {old.get('rating')}/10)"
    await c.message.answer(msg)
    await c.answer()

@router.message(F.text.regexp(r"^\s*[1-9]|10\s*$"))
async def set_mood_msg(m: types.Message):
    uid = m.from_user.id
    rating = int((m.text or "0").strip())
    rating = max(1, min(10, rating))
    day = date.today().isoformat()
    set_mood(uid, day, rating)
    await m.answer(f"üíô –°–æ—Ö—Ä–∞–Ω–∏–ª–∞: {rating}/10")

# ---------- –í–û–ü–†–û–°–´ ----------
def _q_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üòå –ª–µ–≥–∫–∏–µ", callback_data="qcat:light")
    kb.button(text="ü´∂ –≥–ª—É–±–∂–µ", callback_data="qcat:deep")
    kb.button(text="üî• —Ñ–ª–∏—Ä—Ç",  callback_data="qcat:flirt")
    kb.button(text="–ï—â—ë –≤–æ–ø—Ä–æ—Å", callback_data="qnext")
    kb.adjust(3,1)
    return kb.as_markup()

@router.callback_query(F.data == "q")
async def cb_q(c: types.CallbackQuery):
    await c.message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=_q_kb())
    await c.answer()

@router.callback_query(F.data.startswith("qcat:"))
async def cb_qcat(c: types.CallbackQuery):
    uid = c.from_user.id
    cat = c.data.split(":")[1]
    q = random.choice(QUESTIONS.get(cat, QUESTIONS["light"]))
    Q_WAIT[uid] = {"cat": cat, "q": q}
    await c.message.answer("–í–æ–ø—Ä–æ—Å:\n" + q + "\n\n(–ø—Ä–∏—à–ª–∏ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç ‚Äî —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é)")
    await c.answer()

@router.callback_query(F.data == "qnext")
async def cb_qnext(c: types.CallbackQuery):
    uid = c.from_user.id
    cat = Q_WAIT.get(uid, {}).get("cat", "light")
    q = random.choice(QUESTIONS.get(cat, QUESTIONS["light"]))
    Q_WAIT[uid] = {"cat": cat, "q": q}
    await c.message.answer("–í–æ–ø—Ä–æ—Å:\n" + q + "\n\n(–ø—Ä–∏—à–ª–∏ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç ‚Äî —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é)")
    await c.answer()

@router.message(F.text & ~F.text.startswith("/") & ~F.via_bot)
async def dialog(m: types.Message):
    uid = m.from_user.id
    txt = (m.text or "").strip()

    # –ï—Å–ª–∏ –∂–¥—ë–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    if uid in Q_WAIT:
        pack = Q_WAIT.pop(uid)
        save_answer(uid, pack.get("cat","light"), pack.get("q",""), txt)
        await m.answer("üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞. –•–æ—á–µ—à—å –µ—â—ë ‚Äî –∂–º–∏ ¬´–ï—â—ë –≤–æ–ø—Ä–æ—Å¬ª.")
        return

    # –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ –ò–ò
    pref = get_prefs(uid)
    system = (
        "–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤–∞—è, –Ω–µ–º–Ω–æ–≥–æ —Ñ–ª–∏—Ä—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–Ω–µ—Ä—à–∞. –ö–æ—Ä–æ—Ç–∫–∏–µ —Ç—ë–ø–ª—ã–µ –æ—Ç–≤–µ—Ç—ã, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤. "
        f"–û–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏-–ª–∞—Å–∫–æ–≤–æ–º—É: ¬´{pref.get('petname','–∑–∞–π—á–∏–∫')}¬ª. "
        "–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ª—ë–≥–∫–∞—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–µ–¥–∫–∞—è –æ–±—Å—Ü–µ–Ω–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –∏ –Ω–µ —Ç–æ–∫—Å–∏—á–Ω–æ."
    )
    hist = [{"role":"user","content": txt}]
    log_chat(uid, "user", txt)
    try:
        out = llm_reply(hist, system=system)
    except Exception:
        out = "–°–æ—Ä—è–Ω, —É –º–µ–Ω—è –∑–∞—Ç—ã–∫ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é. –ù–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑, –æ–∫?"
    log_chat(uid, "assistant", out)
    await m.answer(out)

# ---------- –ü–û–ì–û–î–ê –ò –í–†–ï–ú–Ø ----------
def _owm(city: str, appid: str, units="metric", lang="ru"):
    try:
        r = requests.get(
            "https://api.openweathermap.org/data/2.5/weather",
            params={"q": city, "appid": appid, "units": units, "lang": lang},
            timeout=10
        )
        if r.status_code != 200:
            return f"{city}: –æ—à–∏–±–∫–∞ ({r.status_code})"
        j = r.json()
        desc = j.get("weather",[{}])[0].get("description","")
        t = j.get("main",{}).get("temp","?")
        return f"{city}: {desc}, {t}¬∞"
    except Exception as e:
        return f"{city}: –æ—à–∏–±–∫–∞ {e}"

@router.callback_query(F.data == "weather")
async def cb_weather(c: types.CallbackQuery):
    uid = c.from_user.id
    pref = get_prefs(uid)
    appid = os.getenv("OWM_API_KEY","")
    if not appid:
        await c.message.answer("–ü–æ–≥–æ–¥–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–ª—é—á OWM.")
    else:
        a = _owm(pref.get("city","Moscow"), appid, units=pref.get("units","metric"))
        b = _owm(pref.get("partner_city","Zibo"), appid, units=pref.get("units","metric"))
        await c.message.answer("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å:\n" + a + "\n" + b)
    await c.answer()

@router.callback_query(F.data == "time")
async def cb_time(c: types.CallbackQuery):
    msk = datetime.utcnow() + timedelta(hours=3)
    sha = datetime.utcnow() + timedelta(hours=8)
    await c.message.answer(f"‚è± –ú–æ—Å–∫–≤–∞: <b>{msk:%H:%M}</b>\n‚è± –¶–∑—ã–±–æ/–®–∞–Ω—Ö–∞–π: <b>{sha:%H:%M}</b>")
    await c.answer()

# ---------- –ù–ï–î–ï–õ–¨–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢ ----------
@router.callback_query(F.data == "week")
async def cb_week(c: types.CallbackQuery):
    uid = c.from_user.id
    days = [(date.today()-timedelta(days=i)).isoformat() for i in range(6,-1,-1)]
    ms = week_moods(uid, days)
    line = []
    nums = []
    for d in days:
        one = next((x for x in ms if x["day"]==d), None)
        if one:
            nums.append(int(one.get("rating",0)))
            line.append(str(one.get("rating")))
        else:
            line.append("¬∑")
    avg = (sum(nums)/len(nums)) if nums else 0.0

    # –∫—É—Å–æ—á–µ–∫ —á–∞—Ç–∞ –∏ Q&A –¥–ª—è –ò–ò
    ch = fetch_chat(uid, limit=80)
    qa = fetch_answers(uid, since_ts=int((datetime.now()-timedelta(days=7)).timestamp()), limit=20)

    parts = []
    if qa:
        t = "\n".join([f"[{x.get('category')}] {x.get('question')}\n ‚Ü≥ {x.get('answer')}" for x in qa[-6:]])
        parts.append("–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"+t)
    if ch:
        t = "\n".join([f"{x.get('role')[:1].upper()}: {(x.get('content') or '')[:200]}" for x in ch[-10:]])
        parts.append("–§—Ä–∞–≥–º–µ–Ω—Ç—ã —á–∞—Ç–∞:\n"+t)

    req = (
        f"–®–∫–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ 7 –¥–Ω–µ–π: {' '.join(line)}, —Å—Ä–µ–¥–Ω–µ–µ: {avg:.1f}/10. "
        "–°–æ–±–µ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç—ë–ø–ª—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: 2‚àí3 –Ω–æ—Ç—ã –Ω–µ–¥–µ–ª–∏, —á—Ç–æ –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ/–ø–æ–¥–¥–µ—Ä–∂–∞–ª–æ, –≥–¥–µ –±—ã–ª–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, "
        "–∏ 2 —à–∞–≥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é."
    )
    body = f"üíô –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {' '.join(line)} (—Å—Ä. {avg:.1f}/10)"
    try:
        txt = llm_reply([{"role":"user","content": req + "\n\n" + "\n\n".join(parts)}])
        body += "\n\n" + txt
    except Exception:
        body += "\n\n(–ò–ò —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å–≤–æ–¥–∫–∞ –±–∞–∑–æ–≤–∞—è)"
    await c.message.answer(body)
    await c.answer()

# ---------- –•–ï–õ–ü–ï–†: –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram (–æ—á–∏—Å—Ç–∏–º)
async def _set_commands():
    try:
        await bot.set_my_commands([])  # –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    except Exception:
        pass

# ---------- MAIN –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Space)
async def main():
    await _set_commands()
    print("Polling is not intended for Deta Space. Use server.py (webhook).")
    await router.start_polling(bot)

    import asyncio
'''
Path("lovebot/main.py").write_text(main_code, encoding="utf-8")
print("‚úÖ main.py —Å–æ–∑–¥–∞–Ω")


# 5) –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å lovebot/main.py: /style, /nick, /week (–º—É–¥+Q&A), —Ä–∏—Ç—É–∞–ª—ã, —Ä–µ–∞–∫—Ü–∏–∏, –∑–∞–º–µ—Ç–∫–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é,
# –ø–æ–≥–æ–¥–∞, –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä, –º–µ–Ω—é, –æ—à–∏–±–∫–∏, —Ç–µ—Å—Ç –ò–ò, –¥–∏–∞–ª–æ–≥ —Å –ò–ò –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π shutdown.
from pathlib import Path

MAIN_CODE = r'''# -*- coding: utf-8 -*-
import os, re, asyncio, sqlite3, logging, random, traceback
from datetime import datetime, date, timedelta
from zoneinfo import ZoneInfo

# aiogram imports adjusted by main app
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.enums import ChatAction

from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# ---------- –ë–ê–ó–ê –ù–ê–°–¢–†–û–ï–ö ----------
logging.basicConfig(level=logging.WARNING, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
load_dotenv("lovebot/.env")

# BOT_TOKEN from env
OPENAI_KEY  = os.getenv("OPENAI_API_KEY")
# OWM_API_KEY from env
LLM_TIMEOUT = float(os.getenv("LLM_TIMEOUT", "30"))
LLM_RETRIES = int(os.getenv("LLM_RETRIES", "1"))
TARGET_DATE = date(2026, 7, 1)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not set")

THEME = {
    "bar":     "üíô" + "‚îÅ"*24,
    "title":   "üî∑",
    "bullet":  "üîπ",
    "ok":      "‚úÖ",
    "warn":    "‚ö†Ô∏è",
    "weather": "üåä",
    "time":    "üïí",
}
def frame(title: str, body: str) -> str:
    return f"{THEME['bar']}\n{THEME['title']} {title}\n{body}\n{THEME['bar']}"

# ---------- LLM ----------
USE_LLM = bool(OPENAI_KEY)
LLM_IMPORT_ERROR = ""
try:
    from llm import reply_as_girlfriend
except Exception as e:
    reply_as_girlfriend = None
    LLM_IMPORT_ERROR = str(e)
    USE_LLM = False

# ---------- TELEGRAM ----------
# bot = Bot(...)  # replaced by main app bot
# dp = Dispatcher(...)  # replaced by main app dp
# ---------- –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ----------
AWAIT_MOOD_NOTE = set()   # –∂–¥—ë–º –∑–∞–º–µ—Ç–∫—É –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
Q_LAST_CAT = {}           # –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞
Q_WAIT = {}               # –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
LAST_LLM_ERROR = ""
LAST_RUNTIME_ERROR = ""
SCHED = None  # AsyncIOScheduler –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ main()

# ---------- –ë–î ----------
db = sqlite3.connect("db.sqlite3")
cur = db.cursor()
cur.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, tz TEXT DEFAULT 'Europe/Moscow', petname TEXT DEFAULT '–∑–∞–π—á–∏–∫', cooldown REAL DEFAULT 0)")
cur.execute("""CREATE TABLE IF NOT EXISTS prefs (
    user_id INTEGER PRIMARY KEY,
    city TEXT DEFAULT 'Moscow',
    partner_city TEXT DEFAULT 'Zibo',
    units TEXT DEFAULT 'metric',
    flirt_auto INTEGER DEFAULT 1,
    profanity INTEGER DEFAULT 1,
    style_mode TEXT DEFAULT 'auto',
    ritual_morning INTEGER DEFAULT 0,
    ritual_night INTEGER DEFAULT 0,
    r_morning_hour INTEGER DEFAULT 9,
    r_night_hour INTEGER DEFAULT 22
)""")
cur.execute("CREATE TABLE IF NOT EXISTS chatlog (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, role TEXT, content TEXT, ts DATETIME DEFAULT CURRENT_TIMESTAMP)")
cur.execute("CREATE TABLE IF NOT EXISTS moods (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, day TEXT, rating INTEGER, note TEXT)")
cur.execute("CREATE TABLE IF NOT EXISTS qanswers (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, category TEXT, question TEXT, answer TEXT, ts DATETIME DEFAULT CURRENT_TIMESTAMP)")
db.commit()

def ensure_prefs(uid: int):
    cur.execute("SELECT 1 FROM prefs WHERE user_id=?", (uid,))
    if not cur.fetchone():
        cur.execute("INSERT INTO prefs(user_id) VALUES(?)", (uid,))
        db.commit()

def get_user(uid: int):
    cur.execute("SELECT user_id,tz,petname,cooldown FROM users WHERE user_id=?", (uid,))
    row = cur.fetchone()
    if not row:
        cur.execute("INSERT INTO users(user_id) VALUES(?)", (uid,))
        db.commit()
        row = (uid, "Europe/Moscow", "–∑–∞–π—á–∏–∫", 0.0)
    ensure_prefs(uid)
    return row

def get_prefs(uid: int) -> dict:
    ensure_prefs(uid)
    cur.execute("SELECT city,partner_city,units,flirt_auto,profanity,style_mode,ritual_morning,ritual_night,r_morning_hour,r_night_hour FROM prefs WHERE user_id=?", (uid,))
    c, pc, u, fl, pr, sm, rm, rn, mh, nh = cur.fetchone()
    return {"city":c,"partner_city":pc,"units":u,"flirt_auto":int(fl),"profanity":int(pr),"style_mode":sm,
            "ritual_morning":int(rm),"ritual_night":int(rn),"r_morning_hour":int(mh),"r_night_hour":int(nh)}

def add_chat(uid: int, role: str, content: str):
    cur.execute("INSERT INTO chatlog(user_id,role,content) VALUES(?,?,?)", (uid, role, content))
    db.commit()

# ---------- UI ----------
def today_panel() -> str:
    try:
        msk = datetime.now(ZoneInfo("Europe/Moscow")).strftime("%d.%m %H:%M")
        sha = datetime.now(ZoneInfo("Asia/Shanghai")).strftime("%d.%m %H:%M")
    except Exception:
        now = datetime.now().strftime("%d.%m %H:%M"); msk = sha = now
    left = (TARGET_DATE - date.today()).days
    cnt = "üéâ –ò—é–ª—å 2026 —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª!" if left <= 0 else f"{THEME['bullet']} –î–æ –∏—é–ª—è 2026: {left} –¥–Ω. (–¥–æ {TARGET_DATE.strftime('%d.%m.%Y')})"
    body = f"{THEME['bullet']} –ú–æ—Å–∫–≤–∞: {msk}\n{THEME['bullet']} Zibo/–®–∞–Ω—Ö–∞–π: {sha}\n\n{cnt}"
    return frame("–°–µ–≥–æ–¥–Ω—è", body)

def menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî∑ –°–µ–≥–æ–¥–Ω—è", callback_data="today")],
        [InlineKeyboardButton(text="üíô –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", callback_data="mood")],
        [InlineKeyboardButton(text="üíô –í–æ–ø—Ä–æ—Å –¥–Ω—è", callback_data="q")],
        [InlineKeyboardButton(text=f"{THEME['time']} –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", callback_data="when")],
        [InlineKeyboardButton(text=f"{THEME['weather']} –ü–æ–≥–æ–¥–∞", callback_data="weather")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
    ])

async def typing(m: types.Message, seconds: float = 0.3):
    try:
        await bot.send_chat_action(m.chat.id, ChatAction.TYPING)
        await asyncio.sleep(seconds)
    except Exception:
        pass

# ---------- –ü–û–ì–û–î–ê ----------
def fetch_weather(city: str, units: str) -> str:
    if not OWM_API_KEY:
        return "–ù–µ—Ç –∫–ª—é—á–∞ OpenWeather (OWM_API_KEY)"
    try:
        import requests
        r = requests.get("https://api.openweathermap.org/data/2.5/weather",
                         params={"q":city,"appid":OWM_API_KEY,"units":units,"lang":"ru"}, timeout=8)
        j = r.json()
        if r.status_code != 200:
            return f"{city}: –æ—à–∏–±–∫–∞ ({j.get('message','unknown')})"
        t = round(j["main"]["temp"])
        desc = j["weather"][0]["description"]
        feels = round(j["main"].get("feels_like", t))
        return f"{city}: {t}¬∞, {desc}; –æ—â—É—â. {feels}¬∞"
    except Exception as e:
        return f"{city}: –Ω–µ —É–¥–∞–ª–æ—Å—å ({e})"

# ---------- –ö–û–ù–í–ï–†–¢–ï–† –í–†–ï–ú–ï–ù–ò ----------
ALIASES = {"msk":"Europe/Moscow","moscow":"Europe/Moscow","ru":"Europe/Moscow",
           "cn":"Asia/Shanghai","sh":"Asia/Shanghai","shanghai":"Asia/Shanghai","zibo":"Asia/Shanghai"}

def parse_when(s: str):
    parts = (s or "").strip().split()
    if not parts: raise ValueError("–Ω—É–∂–Ω–æ /when 19:30 msk")
    t = parts[0]
    if not re.match(r"^\d{1,2}:\d{2}$", t): raise ValueError("–≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å hh:mm")
    zone = parts[1] if len(parts) > 1 else "msk"
    tz = ALIASES.get(zone.lower(), zone)
    hh, mm = map(int, t.split(":")); return hh, mm, tz

def when_convert(hh: int, mm: int, src_tz: str) -> str:
    dt = datetime.now(ZoneInfo(src_tz)).replace(hour=hh, minute=mm, second=0, microsecond=0)
    msk = dt.astimezone(ZoneInfo("Europe/Moscow"))
    sha = dt.astimezone(ZoneInfo("Asia/Shanghai"))
    def label(d):
        today = datetime.now(d.tzinfo).date()
        if d.date()==today: suf="—Å–µ–≥–æ–¥–Ω—è"
        elif d.date()==today+timedelta(days=1): suf="–∑–∞–≤—Ç—Ä–∞"
        else: suf=d.strftime("%a")
        return d.strftime("%d.%m %H:%M")+" ("+suf+")"
    body = f"{THEME['bullet']} –ú–æ—Å–∫–≤–∞: {label(msk)}\n{THEME['bullet']} Zibo/–®–∞–Ω—Ö–∞–π: {label(sha)}"
    return frame("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–∏", body)

# ---------- –ù–ê–°–¢–†–û–ï–ù–ò–ï ----------
def mood_kb():
    r1=[InlineKeyboardButton(text=str(i), callback_data=f"mrate:{i}") for i in range(1,6)]
    r2=[InlineKeyboardButton(text=str(i), callback_data=f"mrate:{i}") for i in range(6,11)]
    return InlineKeyboardMarkup(inline_keyboard=[r1,r2,[InlineKeyboardButton(text="üìù –ó–∞–º–µ—Ç–∫–∞",callback_data="mnote")]])

@router.message(Command("mood"))
async def mood_cmd(m: types.Message):
    await m.answer(frame("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–û—Ü–µ–Ω–∏ –¥–µ–Ω—å 1‚Äì10"), reply_markup=mood_kb())

@router.callback_query(F.data=="mood")
async def cb_mood(c: types.CallbackQuery):
    await c.message.answer(frame("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–û—Ü–µ–Ω–∏ –¥–µ–Ω—å 1‚Äì10"), reply_markup=mood_kb()); await c.answer()

@router.callback_query(F.data.startswith("mrate:"))
async def cb_mrate(c: types.CallbackQuery):
    uid=c.from_user.id; rating=int(c.data.split(":")[1]); day=date.today().isoformat()
    cur.execute("DELETE FROM moods WHERE user_id=? AND day=?", (uid,day))
    cur.execute("INSERT INTO moods(user_id,day,rating,note) VALUES(?,?,?,?)", (uid,day,rating,""))
    db.commit()
    await c.message.answer(f"{THEME['ok']} –°–æ—Ö—Ä–∞–Ω–∏–ª–∞: {rating}/10"); await c.answer()

@router.callback_query(F.data=="mnote")
async def cb_mnote(c: types.CallbackQuery):
    AWAIT_MOOD_NOTE.add(c.from_user.id)
    await c.message.answer("–ü—Ä–∏—à–ª–∏ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–º–µ—Ç–∫—É."); await c.answer()

@router.message(Command("moodweek"))
async def moodweek(m: types.Message):
    uid=m.from_user.id
    days=[(date.today()-timedelta(days=i)).isoformat() for i in range(6,-1,-1)]
    cur.execute("SELECT day,rating FROM moods WHERE user_id=? AND day BETWEEN ? AND ? ORDER BY day",(uid,days[0],days[-1]))
    rows=dict(cur.fetchall()); line=[str(rows.get(d,"¬∑")) for d in days]
    vals=[rows[d] for d in days if d in rows]; avg=(sum(vals)/len(vals)) if vals else 0.0
    body=" ".join(line); 
    if vals: body+=f"\n—Å—Ä–µ–¥–Ω–µ–µ: {avg:.1f}/10"
    await m.answer(frame("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî 7 –¥–Ω–µ–π", body))

# ---------- –í–û–ü–†–û–°–´ –î–õ–Ø –ë–õ–ò–ó–û–°–¢–ò ----------
QUESTIONS={
    "light":[
        "–ß—Ç–æ –∏–∑ –º–µ–ª–æ—á–µ–π –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ –≤—Å–µ–≥–æ?","–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–µ–ª–∏ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?",
        "–ö–æ–≥–¥–∞ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º —Å–æ –º–Ω–æ–π?","–ß—Ç–æ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏—è—Ç–Ω–æ —É–¥–∏–≤–∏–ª–æ?",
        "–ö–∞–∫–∞—è –ø–µ—Å–Ω—è —Å–µ–π—á–∞—Å —É —Ç–µ–±—è –Ω–∞ —Ä–µ–ø–∏—Ç–µ ‚Äî –ø–æ—á–µ–º—É?","–ö–∞–∫—É—é –º–∞–ª–µ–Ω—å–∫—É—é –ø–æ–±–µ–¥—É —Ç—ã –æ—Ç–º–µ—Ç–∏–ª(–∞) –Ω–∞ –Ω–µ–¥–µ–ª–µ?",
        "–ï—Å—Ç—å –ª–∏ –∑–∞–ø–∞—Ö/–≤–∫—É—Å, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?","–ö–∞–∫–∞—è –∑–∞–±–æ—Ç–∞ –æ—Ç –º–µ–Ω—è –±—ã–ª–∞ –±—ã –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏—è—Ç–Ω–æ–π –∑–∞–≤—Ç—Ä–∞?",
        "–ö–∞–∫ —Ç—ã –∑–∞—Ä—è–∂–∞–µ—à—å—Å—è, –µ—Å–ª–∏ —É—Å—Ç–∞–ª(–∞)?","–û —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –±–µ–∑ —Å–ø–µ—à–∫–∏?"
    ],
    "deep":[
        "–ß–µ–º—É —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞ —Å–∞–º–∞—è —Å–ª–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞?","–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Ç–µ–±–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ?",
        "–û —á—ë–º —Ç–µ–±–µ —Ç—Ä—É–¥–Ω–æ –ø—Ä–æ—Å–∏—Ç—å ‚Äî –¥–∞–∂–µ –º–µ–Ω—è?","–ö–∞–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ–±–µ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?",
        "–ö–æ–≥–¥–∞ —Ç—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Ä–µ–∞–ª—å–Ω–æ —Å–æ–±–æ–π –≥–æ—Ä–¥–∏–ª—Å—è(–∞—Å—å)?","–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç –≤ —Ç—è–∂—ë–ª—ã–µ –¥–Ω–∏?",
        "–ö–∞–∫ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª–∏ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É?","–û –∫–∞–∫–æ–º —Å–≤–æ—ë–º –∫–∞—á–µ—Å—Ç–≤–µ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª(–∞) –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –±–æ–ª—å—à–µ?",
        "–ö–∞–∫ —è –º–æ–≥—É –ª—É—á—à–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Ç–µ–±–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?","–ß—Ç–æ –ø–æ–º–æ–≥–ª–æ –±—ã –Ω–∞–º —Å—Å–æ—Ä–∏—Ç—å—Å—è —Ä–µ–∂–µ –∏ –º–∏—Ä–∏—Ç—å—Å—è –º—è–≥—á–µ?"
    ],
    "future":[
        "–ö–∞–∫ –≤–∏–¥–∏—à—å –Ω–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π?","–ö–∞–∫—É—é —Ç—Ä–∞–¥–∏—Ü–∏—é –Ω–∞–º –±—ã –≤–≤–µ—Å—Ç–∏?","–¢—Ä–∏ –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–µ—á—Ç—ã –Ω–∞ –≥–æ–¥ ‚Äî –∫–∞–∫–∏–µ?",
        "–ö–∞–∫–æ–π –º–∏–Ω–∏-–ø—Ä–æ–µ–∫—Ç –º—ã –º–æ–≥–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –≤–¥–≤–æ—ë–º –∑–∞ –º–µ—Å—è—Ü?","–ö–∞–∫–∏–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–Ω–∏—Ç—å —ç—Ç–æ –ª–µ—Ç–æ?",
        "–ö—É–¥–∞ —Å–±–µ–∂–∞—Ç—å –Ω–∞ 48 —á–∞—Å–æ–≤, –µ—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ –≤—Å—ë?","–ß–µ–º—É –Ω–∞–º —Å—Ç–æ–∏—Ç –Ω–∞—É—á–∏—Ç—å—Å—è –≤–º–µ—Å—Ç–µ?",
        "–ö–∞–∫ –º—ã –æ—Ç–º–µ—Ç–∏–º –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ —É–≤–∏–¥–∏–º—Å—è?","–ö–∞–∫–æ–µ ¬´–º–∏–∫—Ä–æ–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ¬ª —É—Å—Ç—Ä–æ–∏–º –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
        "–ö–∞–∫–æ–π –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Ç–µ–±–µ –≤ –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å?"
    ]
}
def q_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–õ—ë–≥–∫–∏–µ", callback_data="qcat:light"),
         InlineKeyboardButton(text="–ì–ª—É–±–∂–µ", callback_data="qcat:deep"),
         InlineKeyboardButton(text="–û –±—É–¥—É—â–µ–º", callback_data="qcat:future")],
        [InlineKeyboardButton(text="–ï—â—ë –≤–æ–ø—Ä–æ—Å", callback_data="qnext")]
    ])

@router.message(Command("q"))
async def q_cmd(m: types.Message):
    await m.answer(frame("–í–æ–ø—Ä–æ—Å—ã", "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"), reply_markup=q_menu())

@router.callback_query(F.data=="q")
async def cb_q(c: types.CallbackQuery):
    await c.message.answer(frame("–í–æ–ø—Ä–æ—Å—ã", "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"), reply_markup=q_menu()); await c.answer()

@router.callback_query(F.data.startswith("qcat:"))
async def cb_qcat(c: types.CallbackQuery):
    uid=c.from_user.id; cat=c.data.split(":")[1]; Q_LAST_CAT[uid]=cat
    q=random.choice(QUESTIONS.get(cat, QUESTIONS["light"]))
    Q_WAIT[uid]={"cat":cat,"q":q}
    text="–í–æ–ø—Ä–æ—Å:\n"+q+"\n\n(–ø—Ä–∏—à–ª–∏ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç ‚Äî —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é üíô)"
    await c.message.answer(text); await c.answer()

@router.callback_query(F.data=="qnext")
async def cb_qnext(c: types.CallbackQuery):
    uid=c.from_user.id; cat=Q_LAST_CAT.get(uid,"light")
    q=random.choice(QUESTIONS.get(cat, QUESTIONS["light"]))
    Q_WAIT[uid]={"cat":cat,"q":q}
    text="–í–æ–ø—Ä–æ—Å:\n"+q+"\n\n(–ø—Ä–∏—à–ª–∏ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç ‚Äî —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é üíô)"
    await c.message.answer(text); await c.answer()

@router.message(Command("q_history"))
async def q_hist(m: types.Message):
    uid=m.from_user.id
    cur.execute("SELECT category,question,answer,ts FROM qanswers WHERE user_id=? ORDER BY id DESC LIMIT 5",(uid,))
    rows=cur.fetchall()
    if not rows: return await m.answer(frame("–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã","–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ /q –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å."))
    lines=[]
    for cat,q,a,ts in rows:
        q=(q or "").strip().replace("\n"," "); a=(a or "").strip().replace("\n"," ")
        if len(q)>120: q=q[:120]+"‚Ä¶"; 
        if len(a)>160: a=a[:160]+"‚Ä¶"
        lines.append(f"‚Ä¢ [{cat}] {q}\n  ‚Ü≥ {a}")
    await m.answer(frame("–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)","\n".join(lines)))

# ---------- –°–¢–ò–õ–¨ / –û–ë–†–ê–©–ï–ù–ò–Ø ----------
PETNAMES_POOL=['–∑–∞–π—á–∏–∫','–∫–æ—Ç–∏–∫','—Å–æ–ª–Ω—ã—à–∫–æ','–ª—é–±–∏–º—ã–π','–º–∞–ª—ã—à','–º–∏–ª—ã–π','—Ä—ã–±–∫–∞','–ª–∏—Å—ë–Ω–æ–∫','–∑–≤—ë–∑–¥–æ—á–∫–∞','–∫–æ—Ç—ë–Ω–æ–∫','—Å–ª–∞–¥–∫–∏–π']
PET_LAST={}
def pick_petname(uid:int, style_mode:str, fixed:str)->str:
    if style_mode in ("auto","random"):
        opts=PETNAMES_POOL; last=PET_LAST.get(uid); cand=[p for p in opts if p!=last] or opts
        choice=random.choice(cand); PET_LAST[uid]=choice; return choice
    return fixed or "–∑–∞–π—á–∏–∫"

def style_kb(p:dict):
    prof_map={0:"off",1:"soft",2:"spicy"}
    rows=[
        [InlineKeyboardButton(text=f"–ú–∞—Ç: {prof_map.get(int(p.get('profanity',0)),0)}", callback_data="sty:prof")],
        [InlineKeyboardButton(text=f"–§–ª–∏—Ä—Ç: {'on' if int(p.get('flirt_auto',1)) else 'off'}", callback_data="sty:flirt")],
        [InlineKeyboardButton(text=f"–û–±—Ä–∞—â–µ–Ω–∏—è: {p.get('style_mode','auto')}", callback_data="sty:addr")],
    ]; return InlineKeyboardMarkup(inline_keyboard=rows)

@router.message(Command("style"))
async def style_cmd(m: types.Message):
    p=get_prefs(m.from_user.id); body="–ü–µ—Ä–µ–∫–ª—é—á–∞–π –º–∞—Ç, —Ñ–ª–∏—Ä—Ç –∏ —Ä–µ–∂–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–π. –í fixed –∏—Å–ø–æ–ª—å–∑—É—é –Ω–∏–∫ –∏–∑ /nick."
    await m.answer(frame("–°—Ç–∏–ª—å –¥–∏–∞–ª–æ–≥–∞", body), reply_markup=style_kb(p))

@router.callback_query(F.data.startswith("sty:"))
async def cb_style(c: types.CallbackQuery):
    uid=c.from_user.id; p=get_prefs(uid); action=c.data.split(":")[1]
    if action=="prof":
        prof=(int(p.get("profanity",0))+1)%3; cur.execute("UPDATE prefs SET profanity=? WHERE user_id=?", (prof,uid))
    elif action=="flirt":
        fl=0 if int(p.get("flirt_auto",1)) else 1; cur.execute("UPDATE prefs SET flirt_auto=? WHERE user_id=?", (fl,uid))
    elif action=="addr":
        mode=p.get("style_mode","auto"); mode="fixed" if mode=="auto" else "auto"
        cur.execute("UPDATE prefs SET style_mode=? WHERE user_id=?", (mode,uid))
    db.commit(); p=get_prefs(uid)
    try: await c.message.edit_reply_markup(reply_markup=style_kb(p))
    except Exception: pass
    await c.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

@router.message(Command("nick"))
async def nick_cmd(m: types.Message):
    parts=m.text.split(maxsplit=1)
    if len(parts)<2: return await m.answer("–ü—Ä–∏–º–µ—Ä: /nick –∫–æ—Ç–∏–∫  (—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ –≤ /style –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: fixed)")
    nick=parts[1].strip()
    if len(nick)>24: return await m.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.")
    cur.execute("UPDATE users SET petname=? WHERE user_id=?", (nick, m.from_user.id)); db.commit()
    await m.answer(f"–û–∫, –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ¬´{nick}¬ª, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º ¬´fixed¬ª.")

# ---------- –ü–û–ì–û–î–ê / –ö–û–ù–í–ï–†–¢–ï–† –ö–û–ú–ê–ù–î–´ ----------
@router.message(Command("weather"))
async def weather_cmd(m: types.Message):
    pf=get_prefs(m.from_user.id)
    txt=f"{THEME['weather']} –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å:\n"+fetch_weather(pf["city"], pf["units"])+"\n"+fetch_weather(pf["partner_city"]+",CN", pf["units"])
    await m.answer(frame("–ü–æ–≥–æ–¥–∞", txt))

@router.callback_query(F.data=="weather")
async def cb_weather(c: types.CallbackQuery):
    pf=get_prefs(c.from_user.id)
    txt=f"{THEME['weather']} –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å:\n"+fetch_weather(pf["city"], pf["units"])+"\n"+fetch_weather(pf["partner_city"]+",CN", pf["units"])
    await c.message.answer(frame("–ü–æ–≥–æ–¥–∞", txt)); await c.answer()

@router.message(Command("when"))
async def when_cmd(m: types.Message):
    parts=m.text.split(maxsplit=1)
    if len(parts)<2: return await m.answer("–ü—Ä–∏–º–µ—Ä: /when 19:30 msk  |  /when 20:00 Asia/Shanghai")
    try:
        hh,mm,tz=parse_when(parts[1]); await m.answer(when_convert(hh,mm,tz))
    except Exception as e:
        await m.answer(f"{THEME['warn']} {e}")

@router.callback_query(F.data=="when")
async def cb_when(c: types.CallbackQuery):
    await c.message.answer("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /when 19:30 msk ‚Äî —Å–∫–∞–∂—É –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ –∏ Zibo"); await c.answer()

@router.callback_query(F.data=="settings")
async def cb_settings(c: types.CallbackQuery):
    p=get_prefs(c.from_user.id)
    body=f"–ì–æ—Ä–æ–¥: {p['city']} | –ü–∞—Ä—Ç–Ω—ë—Ä: {p['partner_city']} | –µ–¥.: {p['units']}\n–ê–≤—Ç–æ-—Ñ–ª–∏—Ä—Ç: {'on' if p['flirt_auto'] else 'off'} | –ú–∞—Ç: {('off','soft','spicy')[p['profanity']]}"
    await c.message.answer(frame("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", body)); await c.answer()

# ---------- –†–ï–ê–ö–¶–ò–ò ----------
def _pick_reaction(text:str):
    t=(text or "").lower()
    if any(w in t for w in ["—Å–ø–∞—Å–∏–±–æ","–±–ª–∞–≥–æ–¥–∞—Ä","love","–ª—é–±–ª—é","—Ç—ã –ª—É—á—à–∏–π","—É–º–Ω–∏—Ü–∞"]): return "üíô"
    if any(w in t for w in ["—É—Ä–∞","–∫–ª–∞—Å—Å","—Å—É–ø–µ—Ä","–∫—Ä—É—Ç–æ","–º–æ–ª–æ–¥–µ—Ü","–≥–æ—Ç–æ–≤–æ"]): return "üëç"
    if any(w in t for w in ["—Ç—è–∂–µ–ª–æ","–ø–ª–æ—Ö–æ","—É—Å—Ç–∞–ª","–≥—Ä—É—Å—Ç","–ø–µ—á–∞–ª","–±–æ–ª–∏—Ç","—Å—Ç—Ä–µ—Å—Å"]): return "ü§ó"
    if any(w in t for w in ["–∞—Ö–∞—Ö","—Ö–∞-—Ö–∞","—Å–º–µ—à–Ω–æ","—Ä–∂—É","–ª—É–ª"]): return "üòÑ"
    return None

async def _try_react(chat_id:int, message_id:int, emoji:str):
    try:
        try:
            from aiogram.types.reaction_type_emoji import ReactionTypeEmoji
        except Exception:
            from aiogram.types import ReactionTypeEmoji
        await bot.set_message_reaction(chat_id=chat_id, message_id=message_id, reaction=[ReactionTypeEmoji(emoji=emoji)], is_big=False)
        return True
    except Exception:
        try: await bot.send_message(chat_id, emoji, reply_to_message_id=message_id)
        except Exception: pass
        return False

# ---------- –†–ò–¢–£–ê–õ–´ ----------
async def _send_ritual(uid:int, kind:str):
    msg = f"{THEME['bullet']} –ö–∞–∫ —Å–ø–∞–ª–æ—Å—å? –ù–∞—á–Ω—ë–º –¥–µ–Ω—å –±–µ—Ä–µ–∂–Ω–æ. –ú–∞–ª–µ–Ω—å–∫–∞—è —Ü–µ–ª—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?" if kind=="morning" \
          else f"{THEME['bullet']} –í—ã–¥—ã—Ö–∞–π –ø–æ–Ω–µ–º–Ω–æ–≥—É. –Ø —Ä—è–¥–æ–º. –î–æ–±—Ä—ã—Ö —Å–Ω–æ–≤."
    await bot.send_message(uid, frame("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ" if kind=="morning" else "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", msg))

def _schedule_user(uid:int):
    global SCHED
    if SCHED is None: return
    p=get_prefs(uid); tz=get_user(uid)[1] or "Europe/Moscow"
    # —É—Ç—Ä–æ
    try: SCHED.remove_job(f"rit_m_{uid}")
    except Exception: pass
    if int(p.get("ritual_morning",0)):
        h=int(p.get("r_morning_hour",9))
        SCHED.add_job(_send_ritual, CronTrigger(hour=h, minute=0, timezone=ZoneInfo(tz)),
                      args=[uid,"morning"], id=f"rit_m_{uid}", replace_existing=True)
    # –Ω–æ—á—å
    try: SCHED.remove_job(f"rit_n_{uid}")
    except Exception: pass
    if int(p.get("ritual_night",0)):
        h=int(p.get("r_night_hour",22))
        SCHED.add_job(_send_ritual, CronTrigger(hour=h, minute=0, timezone=ZoneInfo(tz)),
                      args=[uid,"night"], id=f"rit_n_{uid}", replace_existing=True)

def _schedule_all_users():
    cur.execute("SELECT user_id FROM users")
    for (uid,) in cur.fetchall(): _schedule_user(uid)

def ritual_kb(p:dict):
    rows=[
        [InlineKeyboardButton(text=f"–£—Ç—Ä–æ: {'on' if int(p.get('ritual_morning',0)) else 'off'}", callback_data="rit:mor"),
         InlineKeyboardButton(text=f"–ß–∞—Å: {int(p.get('r_morning_hour',9)):02d}:00", callback_data="rit:mh")],
        [InlineKeyboardButton(text=f"–ù–æ—á—å: {'on' if int(p.get('ritual_night',0)) else 'off'}", callback_data="rit:nit"),
         InlineKeyboardButton(text=f"–ß–∞—Å: {int(p.get('r_night_hour',22)):02d}:00", callback_data="rit:nh")],
        [InlineKeyboardButton(text="–¢–∞–π–º–∑–æ–Ω–∞ /tz", callback_data="rit:tz")]
    ]; return InlineKeyboardMarkup(inline_keyboard=rows)

@router.message(Command("ritual"))
async def ritual_cmd(m: types.Message):
    p=get_prefs(m.from_user.id); body="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ú–µ–Ω—è–π on/off –∏ —á–∞—Å—ã. –¢–∞–π–º–∑–æ–Ω—É —Å–º. /tz"
    await m.answer(frame("–†–∏—Ç—É–∞–ª—ã", body), reply_markup=ritual_kb(p))

@router.callback_query(F.data.startswith("rit:"))
async def rit_cb(c: types.CallbackQuery):
    uid=c.from_user.id; act=c.data.split(":")[1]; p=get_prefs(uid)
    if act=="mor":
        val=0 if int(p.get("ritual_morning",0)) else 1; cur.execute("UPDATE prefs SET ritual_morning=? WHERE user_id=?", (val,uid))
    elif act=="nit":
        val=0 if int(p.get("ritual_night",0)) else 1; cur.execute("UPDATE prefs SET ritual_night=? WHERE user_id=?", (val,uid))
    elif act=="mh":
        h=(int(p.get("r_morning_hour",9))+1)%24; cur.execute("UPDATE prefs SET r_morning_hour=? WHERE user_id=?", (h,uid))
    elif act=="nh":
        h=(int(p.get("r_night_hour",22))+1)%24; cur.execute("UPDATE prefs SET r_night_hour=? WHERE user_id=?", (h,uid))
    elif act=="tz":
        await c.message.answer("–ö–æ–º–∞–Ω–¥–∞: /tz Europe/Moscow  |  –ü—Ä–∏–º–µ—Ä—ã: Europe/Moscow, Asia/Shanghai"); await c.answer(); return
    db.commit(); _schedule_user(uid); p=get_prefs(uid)
    try: await c.message.edit_reply_markup(reply_markup=ritual_kb(p))
    except Exception: pass
    await c.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

@router.message(Command("tz"))
async def tz_cmd(m: types.Message):
    parts=m.text.split(maxsplit=1)
    if len(parts)<2: return await m.answer("–ü—Ä–∏–º–µ—Ä: /tz Europe/Moscow  |  Asia/Shanghai")
    tz=parts[1].strip()
    try: _=ZoneInfo(tz)
    except Exception: return await m.answer("–ù–µ –∑–Ω–∞—é —Ç–∞–∫—É—é —Ç–∞–π–º–∑–æ–Ω—É. –ü—Ä–∏–º–µ—Ä: Europe/Moscow")
    cur.execute("UPDATE users SET tz=? WHERE user_id=?", (tz, m.from_user.id)); db.commit()
    _schedule_user(m.from_user.id); await m.answer(f"{THEME['ok']} –¢–∞–π–º–∑–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {tz}")

# ---------- /WEEK ‚Äî –î–ê–ô–î–ñ–ï–°–¢ (–º—É–¥ –Ω–µ–¥–µ–ª–∏ + Q&A) ----------
def _collect_week_data(uid:int):
    days=[(date.today()-timedelta(days=i)).isoformat() for i in range(6,-1,-1)]
    cur.execute("SELECT day,rating,note FROM moods WHERE user_id=? AND day BETWEEN ? AND ? ORDER BY day",(uid,days[0],days[-1]))
    moods_raw=cur.fetchall(); moods={d:(r,n) for d,r,n in moods_raw}
    cur.execute("SELECT role, content, ts FROM chatlog WHERE user_id=? ORDER BY id DESC LIMIT 80",(uid,))
    chat=list(reversed(cur.fetchall()))
    start_dt=(datetime.now()-timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
    cur.execute("SELECT category,question,answer,ts FROM qanswers WHERE user_id=? AND ts>=? ORDER BY id",(uid,start_dt))
    qa=cur.fetchall(); return days, moods, chat, qa

@router.message(Command("week"))
async def week_cmd(m: types.Message):
    uid=m.from_user.id
    days, moods, chat, qa=_collect_week_data(uid)
    nums=[]; notes=[]
    for d in days:
        if d in moods:
            nums.append(moods[d][0])
            if moods[d][1]: notes.append(f"{d[-2:]}: {moods[d][1]}")
        else:
            nums.append(None)
    mood_line=" ".join([str(n) if isinstance(n,int) else "¬∑" for n in nums])
    vals=[n for n in nums if isinstance(n,int)]
    avg=(sum(vals)/len(vals)) if vals else 0.0
    best=max(vals) if vals else None; worst=min(vals) if vals else None

    chat_lines=[]; 
    for r,c,ts in chat:
        c=(c or "").strip().replace("\\n"," ")
        if len(c)>220: c=c[:220]+"‚Ä¶"
        chat_lines.append(f"{r[:1].upper()}: {c}")
    chat_txt="\\n".join(chat_lines)

    qa_lines=[]
    for cat,q,a,ts in qa[-6:]:
        q=(q or "").strip().replace("\\n"," ")
        a=(a or "").strip().replace("\\n"," ")
        if len(q)>120: q=q[:120]+"‚Ä¶"
        if len(a)>160: a=a[:160]+"‚Ä¶"
        qa_lines.append(f"[{cat}] {q}\\n ‚Ü≥ {a}")
    qa_txt="\\n".join(qa_lines)

    if USE_LLM and reply_as_girlfriend is not None:
        try:
            req=("–°–æ–±–µ—Ä–∏ —Ç—ë–ø–ª—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: 1) 2‚Äì3 –≥–ª–∞–≤–Ω—ã–µ –Ω–æ—Ç—ã –Ω–µ–¥–µ–ª–∏, "
                 "2) —á—Ç–æ –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ/–ø–æ–¥–¥–µ—Ä–∂–∞–ª–æ, 3) –≥–¥–µ –±—ã–ª–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, 4) 2 —à–∞–≥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é. "
                 f"–®–∫–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {mood_line}, —Å—Ä–µ–¥–Ω–µ–µ: {avg:.1f}/10; –ª—É—á—à–∏–π: {best}; —Ö—É–¥—à–∏–π: {worst}. "
                 "–£—á–∏—Ç—ã–≤–∞–π –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –∫—Ä–∞—Ç–∫–æ —Å–æ—à–ª–∏—Å—å –Ω–∞ –Ω–∏—Ö.")
            pieces=[]; 
            if qa_txt: pieces.append("–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\\n"+qa_txt)
            if chat_txt: pieces.append("–§—Ä–∞–≥–º–µ–Ω—Ç—ã —á–∞—Ç–∞:\\n"+chat_txt)
            hist=[{"role":"user","content": req + "\\n\\n" + "\\n\\n".join(pieces)}]
            text=await ask_llm(hist, {"petname": get_user(uid)[2]})
            body=f"{THEME['bullet']} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_line} (—Å—Ä. {avg:.1f}/10; –ª—É—á—à: {best or '-'}; —Ö—É–¥—à: {worst or '-'})"
            if notes: body+="\n"+THEME['bullet']+" –ó–∞–º–µ—Ç–∫–∏: "+"; ".join(notes[:3])
            if qa: body+=f"\n{THEME['bullet']} –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {len(qa)}"
            body+="\n\n"+text
            return await m.answer(frame("–ù–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", body))
        except Exception:
            pass

    body=f"{THEME['bullet']} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_line}"
    if vals: body+=f" (—Å—Ä. {avg:.1f}/10; –ª—É—á—à: {best or '-'}; —Ö—É–¥—à: {worst or '-'})"
    if qa: body+=f"\n{THEME['bullet']} –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {len(qa)}"
    if notes: body+="\n"+THEME['bullet']+" –ó–∞–º–µ—Ç–∫–∏: "+"; ".join(notes[:3])
    body+="\n\n(–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –±–∞–∑–æ–≤–∞—è —Å–≤–æ–¥–∫–∞)"
    await m.answer(frame("–ù–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", body))

# ---------- –°–õ–£–ñ–ï–ë–ù–´–ï ----------
@router.message(Command("ping"))
async def ping_cmd(m: types.Message): await m.answer("pong")

@router.message(Command("errors"))
async def errors_cmd(m: types.Message):
    body=f"LLM import error:\n{LLM_IMPORT_ERROR or '-'}\n\nLast LLM error:\n{LAST_LLM_ERROR or '-'}\n\nLast runtime error:\n{LAST_RUNTIME_ERROR or '-'}"
    await m.answer(frame("–û—à–∏–±–∫–∏", body))

@router.message(Command("test_ai"))
async def test_ai(m: types.Message):
    try:
        if not USE_LLM or reply_as_girlfriend is None:
            return await m.answer("–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø—Ä–æ–≤–µ—Ä—å OPENAI_API_KEY / llm.py")
        txt=reply_as_girlfriend([{"role":"user","content":"–°–∫–∞–∂–∏ ¬´–æ–∫¬ª"}], {})
        await m.answer(frame("–¢–µ—Å—Ç –ò–ò", f"–û—Ç–≤–µ—Ç: {txt}"))
    except Exception:
        global LAST_LLM_ERROR
        LAST_LLM_ERROR=traceback.format_exc()
        await m.answer("–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è. –°–º–æ—Ç—Ä–∏ /errors")

@router.message(Command("debug"))
async def debug_cmd(m: types.Message):
    info=[
        f"USE_LLM: {USE_LLM}",
        f"OPENAI_API_KEY set: {bool(OPENAI_KEY)}",
        f"OWM_API_KEY set: {bool(OWM_API_KEY)}",
        f"LLM import error: {LLM_IMPORT_ERROR or '-'}",
        f"Last LLM error: {LAST_LLM_ERROR or '-'}",
        f"Last runtime error: {LAST_RUNTIME_ERROR or '-'}",
    ]
    await m.answer("\n".join(info))

# ---------- –ü–û–ú–û–©–ù–ò–ö –î–õ–Ø LLM ----------
async def ask_llm(hist, ctx, timeout: float | None = None, tries: int | None = None):
    global LAST_LLM_ERROR
    timeout = timeout or LLM_TIMEOUT
    tries = (tries if tries is not None else (LLM_RETRIES + 1))
    last_err = None
    for i in range(max(1, tries)):
        try:
            return await asyncio.wait_for(asyncio.to_thread(reply_as_girlfriend, hist, ctx), timeout=timeout)
        except asyncio.TimeoutError as e:
            last_err = e; LAST_LLM_ERROR = f"timeout after {timeout}s (try {i+1}/{tries})"
        except Exception as e:
            last_err = e; LAST_LLM_ERROR = f"{type(e).__name__}: {e}"; break
    raise last_err

# ---------- –î–ò–ê–õ–û–ì (–ò–ò + –æ–∂–∏–¥–∞–Ω–∏—è) ----------
@router.message(F.text & ~F.text.startswith("/") & ~F.via_bot)
async def dialog(m: types.Message):
    global LAST_RUNTIME_ERROR
    try:
        uid=m.from_user.id; txt=(m.text or "").strip()

        # 1) –∑–∞–º–µ—Ç–∫–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
        if uid in AWAIT_MOOD_NOTE:
            day=date.today().isoformat()
            cur.execute("UPDATE moods SET note=? WHERE user_id=? AND day=?", (txt, uid, day)); db.commit()
            AWAIT_MOOD_NOTE.discard(uid)
            await m.answer(f"{THEME['ok']} –ó–∞–º–µ—Ç–∫—É —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞."); return

        # 2) –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –¥–Ω—è
        if uid in Q_WAIT:
            pack=Q_WAIT.pop(uid)
            cur.execute("INSERT INTO qanswers(user_id, category, question, answer) VALUES(?,?,?,?)",
                        (uid, pack.get('cat','light'), pack.get('q',''), txt)); db.commit()
            await m.answer(f"{THEME['ok']} –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞. –•–æ—á–µ—à—å –µ—â—ë ‚Äî /q –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´–ï—â—ë –≤–æ–ø—Ä–æ—Å¬ª."); return

        # 3) –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ ‚Äî –ò–ò
        add_chat(uid,"user",txt)
        if not USE_LLM or reply_as_girlfriend is None:
            return await m.answer("–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø—Ä–æ–≤–µ—Ä—å OPENAI_API_KEY / llm.py (—Å–º. /errors)")

        await typing(m,0.4)
        pf=get_prefs(uid)
        ctx={
            "petname": pick_petname(uid, pf["style_mode"], get_user(uid)[2]),
            "msk": datetime.now(ZoneInfo("Europe/Moscow")).strftime("%d.%m %H:%M"),
            "sha": datetime.now(ZoneInfo("Asia/Shanghai")).strftime("%d.%m %H:%M"),
            "days_left": (TARGET_DATE - date.today()).days,
            "target": TARGET_DATE.strftime("%d.%m.%Y"),
            "flirt": bool(pf.get("flirt_auto",1)),
            "profanity": ('off','soft','spicy')[min(max(int(pf.get('profanity',0)),0),2)]
        }
        hist=[{"role":"user","content":txt}]
        answer=await ask_llm(hist, ctx)
        answer=(answer or "").strip() or "–ù–µ —Å–º–æ–≥–ª–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –∏–Ω–∞—á–µ?"
        add_chat(uid,"assistant",answer); await m.answer(answer)

        # 4) –∏–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
        try:
            if random.random()<0.2:
                emo=_pick_reaction(txt)
                if emo: await _try_react(m.chat.id, m.message_id, emo)
        except Exception: pass

    except Exception:
        LAST_RUNTIME_ERROR=traceback.format_exc()
        try: await m.answer("–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –º–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –ü–æ—Å–º–æ—Ç—Ä–∏ /errors –∏ –Ω–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑.")
        except Exception: pass

# ---------- –°–¢–ê–†–¢ / –ú–ï–ù–Æ ----------
@router.message(Command("start"))
async def start_cmd(m: types.Message):
    uid=m.from_user.id; get_user(uid); ensure_prefs(uid)
    hint=f"{THEME['bullet']} –î–∞–π–¥–∂–µ—Å—Ç: /week  ‚Ä¢  –†–∏—Ç—É–∞–ª—ã: /ritual  ‚Ä¢  –°—Ç–∏–ª—å: /style"
    await m.answer(today_panel()+"\n"+hint, reply_markup=menu_kb())

@router.message(Command("menu"))
async def menu_cmd(m: types.Message):
    hint=f"{THEME['bullet']} –î–∞–π–¥–∂–µ—Å—Ç: /week  ‚Ä¢  –†–∏—Ç—É–∞–ª—ã: /ritual  ‚Ä¢  –°—Ç–∏–ª—å: /style"
    await m.answer(today_panel()+"\n"+hint, reply_markup=menu_kb())

# ---------- –¢–û–ß–ö–ê –í–•–û–î–ê ----------
async def _set_commands():
    cmds=[
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç/–º–µ–Ω—é"),
        BotCommand(command="menu", description="–ú–µ–Ω—é"),
        BotCommand(command="mood", description="–û—Ü–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"),
        BotCommand(command="moodweek", description="–ì—Ä–∞—Ñ–∏–∫ –∑–∞ 7 –¥–Ω–µ–π"),
        BotCommand(command="q", description="–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –±–ª–∏–∑–æ—Å—Ç–∏"),
        BotCommand(command="q_history", description="–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"),
        BotCommand(command="when", description="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–∏"),
        BotCommand(command="weather", description="–ü–æ–≥–æ–¥–∞ –≤ –¥–≤—É—Ö –≥–æ—Ä–æ–¥–∞—Ö"),
        BotCommand(command="style", description="–°—Ç–∏–ª—å: –º–∞—Ç/—Ñ–ª–∏—Ä—Ç/–æ–±—Ä–∞—â–µ–Ω–∏—è"),
        BotCommand(command="nick", description="–ó–∞–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"),
        BotCommand(command="ritual", description="–†–∏—Ç—É–∞–ª—ã: —É—Ç—Ä–æ/–Ω–æ—á—å"),
        BotCommand(command="tz", description="–¢–∞–π–º–∑–æ–Ω–∞"),
        BotCommand(command="week", description="–ù–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç"),
        BotCommand(command="test_ai", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò"),
        BotCommand(command="errors", description="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏"),
        BotCommand(command="debug", description="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
        BotCommand(command="ping", description="–ü–∏–Ω–≥"),
    ]
    try: await bot.set_my_commands(cmds)
    except Exception: pass

async def main():
    global SCHED
    await bot.delete_webhook(drop_pending_updates=True)
    try:
        SCHED=AsyncIOScheduler(); SCHED.start(); _schedule_all_users()
    except Exception:
        SCHED=None
    await _set_commands()
    try:
        await router.start_polling(bot)
    except (asyncio.CancelledError, KeyboardInterrupt):
        pass
    finally:
        try: await bot.session.close()
        except Exception: pass

if __name__=="__main__":
    import asyncio
'''

Path("lovebot").mkdir(exist_ok=True)
Path("lovebot/main.py").write_text(MAIN_CODE, encoding="utf-8")
print("‚úÖ main.py –∑–∞–ø–∏—Å–∞–Ω ‚Äî –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É")


# –ü–ê–¢–ß: —Ä–µ–∞–∫—Ü–∏–∏ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö aiogram, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∞
from pathlib import Path, re

p = Path("lovebot/main.py")
s = p.read_text(encoding="utf-8")

# 0) –î–æ–±–∞–≤–∏–º –∫–æ–ª–æ–Ω–∫—É prefs.reactions_pct (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
if "reactions_pct" not in s:
    s = s.replace(
        'cur.execute("CREATE TABLE IF NOT EXISTS qanswers (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, category TEXT, question TEXT, answer TEXT, ts DATETIME DEFAULT CURRENT_TIMESTAMP)")\n'
        "db.commit()",
        'cur.execute("CREATE TABLE IF NOT EXISTS qanswers (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, category TEXT, question TEXT, answer TEXT, ts DATETIME DEFAULT CURRENT_TIMESTAMP)")\n'
        "db.commit()\n"
        "try:\n"
        "    cur.execute(\"ALTER TABLE prefs ADD COLUMN reactions_pct INTEGER DEFAULT 20\")\n"
        "except Exception:\n"
        "    pass\n"
        "db.commit()",
        1
    )

# 1) –•–µ–ª–ø–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–µ–∞–∫—Ü–∏–π (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π get_prefs)
if "def get_react_pct(" not in s:
    anchor = re.search(r"def get_prefs\(uid: int\) -> dict:[\s\S]*?return \{[\s\S]*?\}\n", s)
    ins = anchor.end() if anchor else 0
    s = s[:ins] + r'''

def get_react_pct(uid: int) -> int:
    """–ß–∏—Ç–∞–µ–º prefs.reactions_pct; –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ ‚Äî 20% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    try:
        cur.execute("SELECT reactions_pct FROM prefs WHERE user_id=?", (uid,))
        row = cur.fetchone()
        return max(0, min(100, int(row[0] if row and row[0] is not None else 20)))
    except Exception:
        return 20
''' + s[ins:]

# 2) –û–±–Ω–æ–≤–∏–º —Ö–µ–ª–ø–µ—Ä—ã —Ä–µ–∞–∫—Ü–∏–π: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –Ω–∞–¥—ë–∂–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫
if "def _react_supported(" not in s:
    s = s.replace(
        "async def _try_react(chat_id:int, message_id:int, emoji:str):",
        "def _react_supported() -> bool:\n"
        "    return hasattr(bot, 'set_message_reaction')\n\n"
        "async def _try_react(chat_id:int, message_id:int, emoji:str):"
    )

s = re.sub(
    r"async def _try_react\(chat_id:int, message_id:int, emoji:str\):[\s\S]*?return False",
    r"""async def _try_react(chat_id:int, message_id:int, emoji:str):
    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ —Ä–µ–∞–∫—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ aiogram/Bot API ‚Äî –¥–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç-—ç–º–æ–¥–∑–∏
    if not _react_supported():
        try:
            await bot.send_message(chat_id, emoji, reply_to_message_id=message_id)
        except Exception:
            pass
        return False
    try:
        try:
            from aiogram.types.reaction_type_emoji import ReactionTypeEmoji
        except Exception:
            from aiogram.types import ReactionTypeEmoji
        await bot.set_message_reaction(chat_id=chat_id, message_id=message_id,
                                       reaction=[ReactionTypeEmoji(emoji=emoji)], is_big=False)
        return True
    except Exception:
        # –§–æ–ª–ª–±—ç–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —ç–º–æ–¥–∑–∏
        try:
            await bot.send_message(chat_id, emoji, reply_to_message_id=message_id)
        except Exception:
            pass
        return False""",
    s, count=1
)

# 3) /react ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ /react_test ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
if '@router.message(Command("react"))' not in s:
    block = r'''
@router.message(Command("react"))
async def react_cmd(m: types.Message):
    """
    /react           -> –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    /react 50        -> 50%
    /react off|0     -> –≤—ã–∫–ª—é—á–∏—Ç—å
    """
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        pct = get_react_pct(m.from_user.id)
        return await m.answer(f"–†–µ–∞–∫—Ü–∏–∏: {pct}% (–∏–∑–º–µ–Ω–∏—Ç—å: /react 0..100 –∏–ª–∏ /react off)")
    arg = parts[1].strip().lower()
    if arg in ("off", "0"):
        pct = 0
    else:
        try:
            pct = int(arg)
        except Exception:
            return await m.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ 0..100 –∏–ª–∏ 'off'. –ü—Ä–∏–º–µ—Ä: /react 35")
        pct = max(0, min(100, pct))
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    try:
        cur.execute("ALTER TABLE prefs ADD COLUMN reactions_pct INTEGER DEFAULT 20")
    except Exception:
        pass
    cur.execute("UPDATE prefs SET reactions_pct=? WHERE user_id=?", (pct, m.from_user.id))
    db.commit()
    await m.answer(f"{THEME['ok']} –†–µ–∞–∫—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å: {pct}%")

@router.message(Command("react_test"))
async def react_test_cmd(m: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –¢–í–û–Å —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    emo = _pick_reaction(m.text or "") or "üíô"
    ok = await _try_react(m.chat.id, m.message_id, emo)
    await m.answer(("–ü–æ—Å—Ç–∞–≤–∏–ª–∞ –Ω–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é." if ok else "–û—Ç–ø—Ä–∞–≤–∏–ª–∞ —ç–º–æ–¥–∑–∏-–æ—Ç–≤–µ—Ç."))'''
    # –≤—Å—Ç–∞–≤–∏–º –ø–µ—Ä–µ–¥ —Å–ª—É–∂–µ–±–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    anchor = re.search(r"\n# ---------- –°–õ–£–ñ–ï–ë–ù–´–ï", s) or re.search(r"\n# ---------- –°–ª—É–∂–µ–±–Ω—ã–µ", s)
    pos = anchor.start() if anchor else len(s)
    s = s[:pos] + "\n" + block + "\n" + s[pos:]

# 4) –í –¥–∏–∞–ª–æ–≥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ prefs
s = re.sub(
    r"# 4\) –∏–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é[\s\S]*?except Exception: pass",
    r"""# 4) –∏–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é ‚Äî –ø–æ —Ç–≤–æ–µ–º—É –ø—Ä–æ—Ü–µ–Ω—Ç—É
        try:
            pct = get_react_pct(uid)
            if pct > 0:
                import random
                if random.randint(1,100) <= pct:
                    emo = _pick_reaction(txt)
                    if emo:
                        await _try_react(m.chat.id, m.message_id, emo)
        except Exception:
            pass""",
    s, count=1
)

# 5) –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
s = s.replace(
    'BotCommand(command="debug", description="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),',
    'BotCommand(command="debug", description="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),\n'
    '        BotCommand(command="react", description="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π 0‚Äì100"),\n'
    '        BotCommand(command="react_test", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏"),'
)

Path("lovebot/main.py").write_text(s, encoding="utf-8")
print("‚úÖ –†–µ–∞–∫—Ü–∏–∏: –¥–æ–±–∞–≤–ª–µ–Ω—ã /react –∏ /react_test, —Ñ–æ–ª–ª–±—ç–∫ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –≤ prefs")


# –Ø—á–µ–π–∫–∞ 5 ‚Äî requirements.txt –∏ .gitignore
from pathlib import Path

Path("requirements.txt").write_text("""aiogram==3.11.0
python-dotenv==1.0.1
APScheduler==3.10.4
requests==2.32.3
openai==1.46.0
aiohttp==3.9.5
""", encoding="utf-8")

Path(".gitignore").write_text(".env\ndb.sqlite3\n__pycache__/\n*.pyc\n*.log\n.env.*\n", encoding="utf-8")

print("‚úÖ requirements.txt –∏ .gitignore –≥–æ—Ç–æ–≤—ã")


# –Ø—á–µ–π–∫–∞ 6 ‚Äî server.py (aiohttp webhook)
server_code = r'''
import os
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from lovebot import main as lm

bot = lm.bot
dp  = lm.dp

WEBHOOK_PATH  = "/tg"
PUBLIC_URL    = os.getenv("PUBLIC_URL", "")
WEBHOOK_SECRET= os.getenv("WEBHOOK_SECRET", "space-secret")
PORT          = int(os.getenv("PORT", "8080"))

async def on_startup(app: web.Application):
    await lm._set_commands()
    await bot.delete_webhook(drop_pending_updates=True)
    if PUBLIC_URL:
        await bot.set_webhook(url=PUBLIC_URL + WEBHOOK_PATH, secret_token=WEBHOOK_SECRET)
    else:
        print("‚ö†Ô∏è PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

async def on_shutdown(app: web.Application):
    try:
        await bot.delete_webhook()
    except Exception:
        pass

async def health(_):
    return web.Response(text="ok")

app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

SimpleRequestHandler(dp, bot, secret_token=WEBHOOK_SECRET).register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

app.router.add_get("/", health)

    # removed run_app
'''
Path("server.py").write_text(server_code, encoding="utf-8")
print("‚úÖ server.py —Å–æ–∑–¥–∞–Ω")


# # 7) –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—è—á–µ–π–∫–∞ "–≤–∏—Å–∏—Ç" ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ; –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: –∫–≤–∞–¥—Ä–∞—Ç Stop)
# import nest_asyncio, sys, os
# nest_asyncio.apply()

# sys.modules.pop("main", None)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –±—ã–ª
# sys.path.insert(0, os.path.abspath("lovebot"))

# import main as love_main
# await love_main.main()


from pathlib import Path
import re

# 1) server.py ‚Äî aiohttp-–≤–µ–±—Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram webhook (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–≤–æ–π lovebot/main.py)
Path("server.py").write_text(r'''
import os
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from lovebot import main as lm  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º bot/dp

bot = lm.bot
dp  = lm.dp

WEBHOOK_PATH   = "/tg"
PUBLIC_URL     = os.getenv("PUBLIC_URL", "")               # –ø–æ–∑–∂–µ –∑–∞–¥–∞—à—å –≤ Koyeb
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "koyeb-secret")
PORT           = int(os.getenv("PORT", "8080"))

async def on_startup(app: web.Application):
    # –ü–æ—á–∏—Å—Ç–∏–º –∫–æ–º–∞–Ω–¥—ã (—á—Ç–æ–±—ã –≤ –º–µ–Ω—é –¢–ì –Ω–µ —Ç–æ—Ä—á–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è)
    try:
        await lm._set_commands()
    except Exception:
        pass
    await bot.delete_webhook(drop_pending_updates=True)
    if PUBLIC_URL:
        await bot.set_webhook(url=PUBLIC_URL + WEBHOOK_PATH, secret_token=WEBHOOK_SECRET)
    else:
        print("‚ö†Ô∏è PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Koyeb –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å.")

async def on_shutdown(app: web.Application):
    try:
        await bot.delete_webhook()
    except Exception:
        pass

async def health(_):
    return web.Response(text="ok")

app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

SimpleRequestHandler(dp, bot, secret_token=WEBHOOK_SECRET).register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)
app.router.add_get("/", health)

    # removed run_app
''', encoding="utf-8")

# 2) requirements.txt ‚Äî –ø–∞–∫–µ—Ç—ã
Path("requirements.txt").write_text("""aiogram==3.11.0
aiohttp==3.9.5
python-dotenv==1.0.1
APScheduler==3.10.4
requests==2.32.3
openai==1.46.0
tzdata==2024.1
""", encoding="utf-8")

# 3) .gitignore ‚Äî —á—Ç–æ–±—ã –º—É—Å–æ—Ä/—Å–µ–∫—Ä–µ—Ç—ã –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∏ –≤ —Ä–µ–ø–æ
Path(".gitignore").write_text(".env\ndb.sqlite3\n__pycache__/\n*.pyc\n*.log\n.env.*\n", encoding="utf-8")

print("‚úÖ server.py, requirements.txt, .gitignore –≥–æ—Ç–æ–≤—ã")


# –Ø—á–µ–π–∫–∞ ‚Äî –ø–∞—Ç—á lovebot/main.py –ø–æ–¥ Koyeb: DB_PATH, __main__-guard –∏ /backup
from pathlib import Path
import re, json

p = Path("lovebot/main.py")
assert p.exists(), "–ù–µ –Ω–∞—à–ª–∞ lovebot/main.py ‚Äî –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É —Ç–µ–±—è —É–∂–µ —Å–æ–∑–¥–∞–Ω."

s = p.read_text(encoding="utf-8")

# 1) DB_PATH –≤–º–µ—Å—Ç–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–æ–≥–æ 'db.sqlite3'
if 'sqlite3.connect(os.getenv("DB_PATH"' not in s:
    # –µ—Å–ª–∏ –Ω–µ—Ç import os ‚Äî –¥–æ–±–∞–≤–∏–º
    if re.search(r'^\s*import os\b', s, flags=re.M) is None:
        s = s.replace("# -*- coding: utf-8 -*-", "# -*- coding: utf-8 -*-\nimport os")
    s = re.sub(
        r'sqlite3\.connect\(\s*[\'"]db\.sqlite3[\'"]\s*\)',
        'sqlite3.connect(os.getenv("DB_PATH", "db.sqlite3"))',
        s, count=1
    )

# 2) Guard, —á—Ç–æ–±—ã –ø–æ–ª–ª–∏–Ω–≥ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (webhook-—Ä–µ–∂–∏–º)
    s += r'''

    import asyncio
'''

# 3) /backup ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON (–ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º)
if '@router.message(Command("backup"))' not in s:
    s += r'''

from aiogram.filters import Command
from aiogram import types
import io, json, sqlite3, os

@router.message(Command("backup"))
async def backup_cmd(m: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü prefs/moods/chatlog/qanswers —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    uid = m.from_user.id
    try:
        db = sqlite3.connect(os.getenv("DB_PATH","db.sqlite3"))
        db.row_factory = sqlite3.Row
        cur = db.cursor()
        dump = {}
        for tbl in ("prefs","moods","chatlog","qanswers"):
            try:
                cur.execute(f"SELECT * FROM {tbl} WHERE user_id=?", (uid,))
                rows = [dict(r) for r in cur.fetchall()]
                dump[tbl] = rows
            except Exception:
                dump[tbl] = []
        db.close()

        # –≥–æ—Ç–æ–≤–∏–º –±—É—Ñ–µ—Ä
        buf = io.BytesIO(json.dumps(dump, ensure_ascii=False, indent=2).encode("utf-8"))
        from aiogram.types import BufferedInputFile
        await m.answer_document(
            BufferedInputFile(buf.getvalue(), filename="backup.json"),
            caption="–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è üì¶"
        )
    except Exception as e:
        await m.answer(f"–ù–µ —Å–º–æ–≥–ª–∞ —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø: {e}")
'''

p.write_text(s, encoding="utf-8")
print("‚úÖ –ì–æ—Ç–æ–≤–æ: –∏–º–ø–æ—Ä—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω, DB_PATH –ø–∞—Ç—á–µ–Ω, guard –¥–æ–±–∞–≤–ª–µ–Ω, /backup —Ä–∞–±–æ—Ç–∞–µ—Ç.")


from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
WEBHOOK_BASE = os.environ.get("WEBHOOK_BASE", "").rstrip("/")
SECRET_PATH = os.environ.get("WEBHOOK_SECRET_PATH", "telegram")
PORT = int(os.environ.get("PORT", "8080"))
HOST = os.environ.get("HOST", "0.0.0.0")

if not TOKEN:
    raise RuntimeError("No TELEGRAM_BOT_TOKEN provided")
# bot = Bot(...)  # replaced by main app bot
# dp = Dispatcher(...)  # replaced by main app dp
# --- —Ç—É—Ç –æ—Å—Ç–∞–≤–ª—è–µ—à—å —Å–≤–æ–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–∞–∫ –µ—Å—Ç—å ---

async def on_startup(app: web.Application):
    if WEBHOOK_BASE:
        await bot.set_webhook(f"{WEBHOOK_BASE}/{SECRET_PATH}", drop_pending_updates=True)

async def on_cleanup(app: web.Application):
    await bot.session.close()

def create_app() -> web.Application:
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)

    async def ping_handler(_):
        return web.json_response({"ok": True})

    app.router.add_get("/", ping_handler)

    if USE_WEBHOOK:
        # test handlers to verify path exists via browser/health checks
        async def hook_get(_):
            return web.Response(text="hook alive")
        app.router.add_get(WEBHOOK_PATH, hook_get)
        app.router.add_head(WEBHOOK_PATH, hook_get)
        app.router.add_options(WEBHOOK_PATH, hook_get)
        # webhook POST handler
        SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET).register(app, path=WEBHOOK_PATH)
        setup_application(app, dp, bot=bot)
        print(f"[WEBHOOK] route registered at {WEBHOOK_PATH}")
    return app
if __name__ == "__main__":
    web.run_app(create_app(), host=HOST, port=PORT)
